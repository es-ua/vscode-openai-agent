import * as vscode from 'vscode';
import { OpenAIService } from '../services/openAIService';
import { ConfigurationService } from '../services/configurationService';
import { PermissionService } from '../services/permissionService';

export class ChatViewProvider implements vscode.WebviewViewProvider {
  public static readonly viewId = 'openaiAgent.chatView';
  public static readonly panelViewId = 'openaiAgent.panelView';
  private _view?: vscode.WebviewView;
  private openAI: OpenAIService;
  private configService: ConfigurationService;
  private permissionService?: PermissionService;
  private extensionUri: vscode.Uri;
  private isProcessing: boolean = false;

  constructor(openAI: OpenAIService, configService: ConfigurationService, extensionUri: vscode.Uri) {
    this.openAI = openAI;
    this.configService = configService;
    this.extensionUri = extensionUri;
    // PermissionService will be initialized in resolveWebviewView
  }

  private sendMessage(type: string, data: any) {
    if (this._view) {
      this._view.webview.postMessage({ type, ...data });
    }
  }

  async resolveWebviewView(webviewView: vscode.WebviewView): Promise<void> {
    this._view = webviewView;
    this.openAI.setView(webviewView);
    
    // Get permission service after OpenAIService is initialized
    this.permissionService = this.openAI.getPermissionService();
    
    // Send initial permission stats
    if (this.permissionService) {
      const stats = this.permissionService.getPermissionStats();
      console.log('Sending initial permission stats:', stats);
      webviewView.webview.postMessage({ type: 'permissionStats', stats });
    }
    webviewView.webview.options = {
      enableScripts: true,
      localResourceRoots: [this.extensionUri]
    };
    webviewView.webview.html = this.getHtml(webviewView.webview);

    const postThreads = async () => {
      console.log('postThreads called');
      const info = this.openAI.getThreadInfo();
      console.log('Thread info received:', info);
      webviewView.webview.postMessage({ type: 'threads', info });
      
      // Load history for active thread with a small delay to avoid conflicts
      if (info.active) {
        console.log('Loading history for active thread:', info.active);
        const activeThreadId = info.active;
        setTimeout(async () => {
          try {
            const history = await this.openAI.getThreadHistory(activeThreadId);
            console.log('Thread history loaded:', history);
            webviewView.webview.postMessage({ type: 'loadHistory', history });
          } catch (error: any) {
            console.error('Failed to load thread history:', error);
            webviewView.webview.postMessage({ type: 'error', message: 'Failed to load chat history' });
          }
        }, 100);
      } else {
        console.log('No active thread found');
      }
    };

    try { await this.openAI.initialize(); } catch {}
    
    // Check if we have any threads, if not create one
    const info = this.openAI.getThreadInfo();
    console.log('Initial thread info:', info);
    if (!info.threads || info.threads.length === 0) {
      console.log('No threads found, creating new thread');
      try {
        const newThreadId = await this.openAI.newThread();
        console.log('New thread created with ID:', newThreadId);
      } catch (error) {
        console.error('Failed to create initial thread:', error);
      }
    } else if (!info.active && info.threads.length > 0) {
      // If we have threads but no active one, set the last one as active
      console.log('No active thread, setting last thread as active');
      try {
        await this.openAI.setActiveThread(info.threads[info.threads.length - 1]);
        console.log('Active thread set to:', info.threads[info.threads.length - 1]);
      } catch (error) {
        console.error('Failed to set active thread:', error);
      }
    }
    
    await postThreads();

    webviewView.onDidChangeVisibility(() => {
      if (webviewView.visible) {
        postThreads();
      }
    });

    webviewView.webview.onDidReceiveMessage(async msg => {
      if (!msg || !msg.type) return;
      if (msg.type === 'sendPrompt') {
        const prompt: string = msg.prompt || '';
        const files: any[] = msg.files || [];
        if (!prompt.trim() && files.length === 0) return;
        
        // Cancel any current run before starting a new one
        if (this.isProcessing) {
          try {
            await this.openAI.cancelCurrentRun();
          } catch (error) {
            console.warn('Failed to cancel previous run:', error);
          }
        }
        
        this.isProcessing = true;
        try {
          // Show initial thinking
          const thinkingContent = files.length > 0 
            ? `Analyzing your question and ${files.length} file(s)...`
            : 'Analyzing your question...';
          webviewView.webview.postMessage({ type: 'thinking', content: thinkingContent });
          
          // Create enhanced prompt with file information and content
          let enhancedPrompt = prompt;
          if (files.length > 0) {
            console.log('Processing files:', files);
            let fileSections: string[] = [];
            
            files.forEach(file => {
              if (file.content) {
                if (file.content.type === 'image') {
                  fileSections.push(`\n--- IMAGE FILE: ${file.name} ---\n${file.content.description}\nBase64 data: ${file.content.data}`);
                } else if (file.content.type === 'text') {
                  fileSections.push(`\n--- TEXT FILE: ${file.name} ---\n${file.content.content}`);
                } else if (file.content.type === 'binary') {
                  fileSections.push(`\n--- FILE: ${file.name} ---\n${file.content.description}`);
                }
              } else {
                // Fallback for old format
                fileSections.push(`\n--- FILE: ${file.name} ---\nType: ${file.type}, Size: ${Math.round(file.size/1024)}KB`);
              }
            });
            
            enhancedPrompt = `Files attached:${fileSections.join('\n')}\n\nQuestion: ${prompt}`;
          }
          
          const res = await this.openAI.chat(enhancedPrompt, (thinkingStep: string) => {
            if (this.isProcessing) {
              webviewView.webview.postMessage({ type: 'updateThinking', content: thinkingStep });
            }
          });
          
          console.log('Chat response received:', res);
          console.log('isProcessing state:', this.isProcessing);
          
          // Always send the response, regardless of isProcessing state
          webviewView.webview.postMessage({ type: 'append', role: 'assistant', content: res || '(no content)' });
          
          // Auto-generate thread name from first message if thread is new
          const info = this.openAI.getThreadInfo();
          if (info.active && !info.threadNames[info.active]) {
            const threadName = prompt.length > 20 ? prompt.substring(0, 20) + '...' : prompt;
            await this.openAI.setThreadName(info.active, threadName);
            await postThreads();
          }
        } catch (e: any) {
          // Always send error, regardless of isProcessing state
          webviewView.webview.postMessage({ type: 'error', message: e?.message || String(e) });
        } finally {
          this.isProcessing = false;
        }
      } else if (msg.type === 'newThread') {
        // If currently processing, stop the current process first
        if (this.isProcessing) {
          this.isProcessing = false;
          webviewView.webview.postMessage({ type: 'thinking', content: 'Creating new thread...' });
        }
        await this.openAI.newThread();
        try { await this.openAI.initialize(); } catch {}
        await postThreads();
        // ask webview to clear UI for fresh chat
        webviewView.webview.postMessage({ type: 'clear' });
      } else if (msg.type === 'closeThread') {
        const threadId = msg.id;
        const activeThreadId = this.openAI.getActiveThreadId();
        
        // If closing the active thread and currently processing, stop the current process first
        if (this.isProcessing && threadId === activeThreadId) {
          this.isProcessing = false;
          webviewView.webview.postMessage({ type: 'thinking', content: 'Stopping AI and closing thread...' });
        }
        
        if (threadId) {
          await this.openAI.closeThread(threadId);
          try { await this.openAI.initialize(); } catch {}
          await postThreads();
          webviewView.webview.postMessage({ type: 'clear' });
        }
      } else if (msg.type === 'switchThread') {
        // If currently processing, stop the current process first
        if (this.isProcessing) {
          this.isProcessing = false;
          webviewView.webview.postMessage({ type: 'thinking', content: 'Switching threads...' });
        }
        await this.openAI.setActiveThread(msg.id);
        try { await this.openAI.initialize(); } catch {}
        await postThreads();
        webviewView.webview.postMessage({ type: 'clear' });
      } else if (msg.type === 'setThreadName') {
        await this.openAI.setThreadName(msg.id, msg.name);
        await postThreads();
      } else if (msg.type === 'stopAI') {
        this.isProcessing = false;
        // Cancel the current OpenAI run
        try {
          await this.openAI.cancelCurrentRun();
        } catch (error) {
          console.warn('Failed to cancel OpenAI run:', error);
        }
      } else if (msg.type === 'setMode') {
        // Call the setMode command
        vscode.commands.executeCommand('vscode-openai-agent.setMode', msg.mode);
        // Send mode change confirmation to the webview
        webviewView.webview.postMessage({ type: 'modeChanged', mode: msg.mode });
      } else if (msg.type === 'setModel') {
        console.log('Setting model to:', msg.model);
        // Update the model setting
        await this.configService.setModel(msg.model);
        console.log('Model saved to config, current model:', this.configService.getModel());
        // Update the assistant with the new model
        try {
          await this.openAI.updateAssistantModel();
          console.log('Assistant model updated successfully');
        } catch (error) {
          console.error('Error updating assistant model:', error);
        }
        webviewView.webview.postMessage({ type: 'modelChanged', model: msg.model });
      } else if (msg.type === 'getCurrentModel') {
        // Send current model to webview
        const currentModel = this.configService.getModel();
        webviewView.webview.postMessage({ type: 'modelChanged', model: currentModel });
      } else if (msg.type === 'getSessionCost') {
        // Send current session cost to webview
        const sessionCost = this.openAI.getSessionCost();
        webviewView.webview.postMessage({ type: 'sessionCost', cost: sessionCost });
      } else if (msg.type === 'resetSessionCost') {
        // Reset session cost
        this.openAI.resetSessionCost();
        webviewView.webview.postMessage({ type: 'sessionCost', cost: 0 });
      } else if (msg.type === 'permissionResponse') {
        // Handle permission response from UI
        // This will be handled by the PermissionService directly
      } else if (msg.type === 'getPermissionStats') {
        // Send permission statistics to webview
        const stats = this.openAI.getPermissionStats();
        webviewView.webview.postMessage({ type: 'permissionStats', stats });
      } else if (msg.type === 'getAllPermissions') {
        // Send all permissions to webview
        const permissions = this.openAI.getAllPermissions();
        webviewView.webview.postMessage({ type: 'allPermissions', permissions });
      } else if (msg.type === 'setAutoApprove') {
        // Set auto-approve mode
        this.openAI.setAutoApprove(msg.enabled);
        webviewView.webview.postMessage({ type: 'autoApproveChanged', enabled: msg.enabled });
      } else if (msg.type === 'clearPermissions') {
        // Clear all permissions
        this.openAI.clearPermissions();
        webviewView.webview.postMessage({ type: 'permissionsCleared' });
      } else if (msg.type === 'removePermission') {
        // Remove specific permission
        this.openAI.removePermission(msg.command);
        webviewView.webview.postMessage({ type: 'permissionRemoved', command: msg.command });
      }
    });
  }

  private getHtml(webview: vscode.Webview): string {
    const addIcon = webview.asWebviewUri(vscode.Uri.joinPath(this.extensionUri, 'media', 'add_macos.svg')).toString();
    const clearIcon = webview.asWebviewUri(vscode.Uri.joinPath(this.extensionUri, 'media', 'clear_macos.svg')).toString();
    const deleteIcon = webview.asWebviewUri(vscode.Uri.joinPath(this.extensionUri, 'media', 'close_macos.svg')).toString();
    
    // Simple CSP
    const simpleCsp = `default-src 'none'; img-src ${webview.cspSource} https:; style-src 'unsafe-inline' ${webview.cspSource}; script-src 'unsafe-inline' ${webview.cspSource};`;
    return `<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta http-equiv="Content-Security-Policy" content="${simpleCsp}">
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<style>
  body { font-family: var(--vscode-font-family); color: var(--vscode-foreground); background: var(--vscode-editor-background); margin: 0; display: flex; flex-direction: column; height: 100vh; }
  #toolbar { display:flex; gap:6px; align-items:center; padding:6px; border-bottom: 1px solid var(--vscode-panel-border); }
  .icon-btn { background: transparent; border: 1px solid var(--vscode-panel-border); border-radius:4px; padding:2px 6px; cursor:pointer; }
  .icon-btn:hover { background: var(--vscode-editorWidget-background); }
  .icon-btn img { width:16px; height:16px; display:block; }
  #tabs { margin-left:auto; font-size:11px; opacity:.85; display:flex; gap:6px; flex-wrap:wrap; }
  .tab { padding:2px 6px; border-radius:4px; border:1px solid var(--vscode-panel-border); cursor:pointer; display:flex; align-items:center; gap:4px; }
  .tab.active { background: var(--vscode-editorWidget-background); border-color: var(--vscode-editorWidget-border); }
  .tab-actions { display:flex; gap:4px; align-items:center; }
  .tab-btn { 
    background:transparent; 
    border:none; 
    padding:2px; 
    cursor:pointer; 
    border-radius:50%; 
    width:16px; 
    height:16px; 
    display:flex; 
    align-items:center; 
    justify-content:center;
    transition: all 0.2s ease;
  }
  .tab-btn:hover { 
    background:rgba(0,0,0,0.1); 
    transform: scale(1.1);
  }
  .tab-btn img { 
    width:12px; 
    height:12px; 
    pointer-events: none;
  }
  #messages { flex: 1; overflow: auto; padding: 8px; }
  .msg { padding: 6px 8px; margin: 6px 0; border-radius: 6px; white-space: pre-wrap; }
  .user { background: var(--vscode-editor-selectionBackground); }
  .assistant { background: var(--vscode-editorHoverWidget-background); }
  .msg-content {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  .msg-role {
    font-weight: 600;
    color: var(--vscode-textLink-foreground);
    font-size: 0.9em;
  }
  .msg-text {
    line-height: 1.5;
    white-space: pre-wrap;
    word-wrap: break-word;
  }
  .msg-text strong {
    font-weight: 600;
    color: var(--vscode-foreground);
  }
  .msg-text em {
    font-style: italic;
    color: var(--vscode-descriptionForeground);
  }
  .msg-text code {
    background: var(--vscode-textCodeBlock-background);
    color: var(--vscode-textPreformat-foreground);
    padding: 2px 4px;
    border-radius: 3px;
    font-family: var(--vscode-editor-font-family);
    font-size: 0.9em;
  }
  .msg-text pre {
    background: var(--vscode-textCodeBlock-background);
    color: var(--vscode-textPreformat-foreground);
    padding: 12px;
    border-radius: 6px;
    overflow-x: auto;
    margin: 8px 0;
    border: 1px solid var(--vscode-panel-border);
  }
  .msg-text pre code {
    background: none;
    padding: 0;
    border-radius: 0;
  }
  .msg-text h1, .msg-text h2, .msg-text h3 {
    margin: 12px 0 8px 0;
    color: var(--vscode-foreground);
  }
  .msg-text h1 { font-size: 1.3em; }
  .msg-text h2 { font-size: 1.2em; }
  .msg-text h3 { font-size: 1.1em; }
  .msg-text hr {
    border: none;
    border-top: 1px solid var(--vscode-panel-border);
    margin: 12px 0;
  }
  .attached-files {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin: 4px 0;
    padding: 6px 8px;
    background: var(--vscode-editorWidget-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
    font-size: 11px;
  }
  .attached-file {
    display: flex;
    align-items: center;
    gap: 4px;
    padding: 2px 6px;
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border-radius: 3px;
    font-size: 11px;
    max-width: 150px;
  }
  .attached-file img {
    width: 12px;
    height: 12px;
    object-fit: cover;
    border-radius: 2px;
  }
  .attached-file .file-name {
    flex: 1;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .attached-file .remove-btn {
    background: none;
    border: none;
    color: inherit;
    cursor: pointer;
    padding: 2px;
    border-radius: 2px;
    opacity: 0.7;
  }
  .attached-file .remove-btn:hover {
    opacity: 1;
    background: rgba(255,255,255,0.1);
  }
  .file-preview {
    max-width: 300px;
    max-height: 200px;
    border-radius: 4px;
    margin: 4px 0;
    border: 1px solid var(--vscode-panel-border);
  }
  .thinking { 
    background: var(--vscode-editorWidget-background); 
    border: 1px solid var(--vscode-panel-border);
    border-radius: 8px;
    margin: 6px 0;
    padding: 12px;
    font-style: italic;
    opacity: 0.8;
    position: relative;
  }
  .thinking-header {
    font-weight: 600;
    color: var(--vscode-foreground);
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    gap: 8px;
  }
  .thinking-content {
    color: var(--vscode-descriptionForeground);
    white-space: pre-wrap;
    line-height: 1.4;
  }
  .thinking-icon {
    width: 16px;
    height: 16px;
    opacity: 0.7;
  }
  .loading { display: flex; align-items: center; justify-content: center; padding: 20px; color: var(--vscode-foreground); opacity: 0.7; }
  .loading-spinner { width: 20px; height: 20px; border: 2px solid var(--vscode-panel-border); border-top: 2px solid var(--vscode-foreground); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 8px; }
  @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
  .loading-text { font-size: 12px; }
  .loading-stop { background: var(--vscode-button-background); color: var(--vscode-button-foreground); border: 1px solid var(--vscode-button-border); border-radius: 4px; padding: 4px 8px; margin-left: 12px; cursor: pointer; font-size: 11px; }
  .loading-stop:hover { background: var(--vscode-button-hoverBackground); }
  #form { 
    display: flex; 
    gap: 8px; 
    padding: 12px 16px; 
    border-top: 1px solid var(--vscode-panel-border); 
    background: var(--vscode-editor-background);
    align-items: flex-end;
    transition: all 0.3s ease;
  }
  .input-container {
    display: flex;
    flex: 1;
    flex-direction: column;
    gap: 4px;
  }
  .input-header {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding: 0 4px;
  }
  #form.loading {
    background: var(--vscode-editorWidget-background);
    box-shadow: 0 -2px 8px rgba(0,0,0,0.1);
  }
  #prompt { 
    flex: 1; 
    padding: 8px 16px;
    border: 1px solid var(--vscode-input-border);
    border-radius: 20px;
    background: var(--vscode-input-background);
    color: var(--vscode-input-foreground);
    font-size: 14px;
    outline: none;
    transition: all 0.2s ease;
    position: relative;
    resize: none;
    min-height: 18px;
    max-height: 36px;
    font-family: inherit;
    line-height: 1.4;
  }
  #prompt::placeholder {
    color: var(--vscode-input-placeholderForeground);
    transition: opacity 0.2s ease;
  }
  #prompt:focus::placeholder {
    opacity: 0.7;
  }
  #prompt:focus { 
    border-color: var(--vscode-focusBorder);
    box-shadow: 0 0 0 1px var(--vscode-focusBorder), 0 2px 8px rgba(0,0,0,0.1);
    transform: translateY(-1px);
  }
  #prompt:disabled { 
    opacity: 0.6; 
    cursor: not-allowed; 
    background: var(--vscode-input-background);
  }
  #form button[type="submit"], 
  #form button[type="button"]:not(#file-upload-btn) { 
    padding: 10px 20px;
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border: 1px solid var(--vscode-button-border);
    border-radius: 20px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
    min-width: 80px;
    display: flex;
    align-items: center;
    gap: 6px;
    justify-content: center;
  }
  #file-upload-btn {
    padding: 4px 8px !important;
    min-width: auto !important;
    width: auto !important;
    height: 24px !important;
    border-radius: 12px !important;
    background: var(--vscode-button-secondaryBackground) !important;
    color: var(--vscode-button-secondaryForeground) !important;
    border: 1px solid var(--vscode-button-secondaryBorder) !important;
    display: flex !important;
    align-items: center !important;
    gap: 4px !important;
    justify-content: center !important;
    opacity: 0.7 !important;
    transition: all 0.2s ease !important;
    font-size: 11px !important;
    white-space: nowrap !important;
    font-weight: normal !important;
    margin: 0 !important;
    box-shadow: none !important;
    text-transform: none !important;
    letter-spacing: normal !important;
  }
  #file-upload-btn:hover:not(:disabled) {
    background: var(--vscode-button-secondaryHoverBackground) !important;
    opacity: 1 !important;
    transform: scale(1.1) !important;
  }
  
  /* Override any inherited button styles */
  #form #file-upload-btn {
    padding: 4px 8px !important;
    min-width: auto !important;
    width: auto !important;
    height: 24px !important;
    border-radius: 12px !important;
    background: var(--vscode-button-secondaryBackground) !important;
    color: var(--vscode-button-secondaryForeground) !important;
    border: 1px solid var(--vscode-button-secondaryBorder) !important;
    font-size: 11px !important;
    font-weight: normal !important;
  }
  #form button[type="submit"]:hover:not(:disabled),
  #form button[type="button"]:not(#file-upload-btn):hover:not(:disabled) { 
    background: var(--vscode-button-hoverBackground);
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
  }
  #form button[type="submit"]:active:not(:disabled),
  #form button[type="button"]:not(#file-upload-btn):active:not(:disabled) { 
    transform: translateY(0) scale(0.98);
  }
  #form button[type="submit"]:disabled,
  #form button[type="button"]:not(#file-upload-btn):disabled { 
    opacity: 0.5; 
    cursor: not-allowed; 
    transform: none;
    box-shadow: none;
  }
  #form button[type="submit"] svg,
  #form button[type="button"]:not(#file-upload-btn) svg {
    transition: transform 0.2s ease;
  }
  #form button[type="submit"]:hover:not(:disabled) svg,
  #form button[type="button"]:not(#file-upload-btn):hover:not(:disabled) svg {
    transform: translateX(2px);
  }
  #mode-selector {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: var(--vscode-editor-background);
    border-top: 1px solid var(--vscode-panel-border);
    font-size: 12px;
    color: var(--vscode-foreground);
  }
  #mode-selector label {
    font-weight: 500;
    color: var(--vscode-descriptionForeground);
  }
  #mode-select {
    background: var(--vscode-input-background);
    color: var(--vscode-input-foreground);
    border: 1px solid var(--vscode-input-border);
    border-radius: 4px;
    padding: 4px 8px;
    font-size: 12px;
    outline: none;
    transition: all 0.2s ease;
  }
  #mode-select:focus {
    border-color: var(--vscode-focusBorder);
    box-shadow: 0 0 0 1px var(--vscode-focusBorder);
  }
  #mode-select:hover {
    border-color: var(--vscode-input-border);
  }
  #model-select {
    background: var(--vscode-input-background);
    color: var(--vscode-input-foreground);
    border: 1px solid var(--vscode-input-border);
    border-radius: 4px;
    padding: 4px 8px;
    font-size: 12px;
    outline: none;
    transition: all 0.2s ease;
  }
  #model-select:focus {
    border-color: var(--vscode-focusBorder);
    box-shadow: 0 0 0 1px var(--vscode-focusBorder);
  }
  #model-select:hover {
    border-color: var(--vscode-input-border);
  }
  .cost-info {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 4px 8px;
    background: var(--vscode-editorWidget-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
    font-size: 11px;
    color: var(--vscode-descriptionForeground);
    margin: 4px 0;
  }
  .cost-info .cost-label {
    font-weight: 500;
    color: var(--vscode-foreground);
  }
  .cost-info .cost-value {
    color: var(--vscode-textLink-foreground);
    font-weight: 600;
  }
  .cost-info .tokens-info {
    color: var(--vscode-descriptionForeground);
    font-size: 10px;
  }
  .cost-info .reset-btn {
    background: transparent;
    border: 1px solid var(--vscode-panel-border);
    color: var(--vscode-foreground);
    border-radius: 3px;
    padding: 2px 6px;
    cursor: pointer;
    font-size: 10px;
    transition: all 0.2s ease;
  }
  .cost-info .reset-btn:hover {
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
  }
  .paste-hint {
    font-size: 10px;
    color: var(--vscode-descriptionForeground);
    opacity: 0.7;
    text-align: center;
    margin-top: 4px;
    padding: 2px 8px;
  }
  .paste-hint:hover {
    opacity: 1;
  }
  .permission-info {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 4px 8px;
    background: var(--vscode-editorWidget-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 4px;
    font-size: 11px;
    color: var(--vscode-descriptionForeground);
    margin: 4px 0;
  }
  .permission-info .permission-label {
    font-weight: 500;
    color: var(--vscode-foreground);
  }
  .permission-info .permission-stats {
    color: var(--vscode-textLink-foreground);
    font-weight: 600;
  }
  .permission-btn {
    background: transparent;
    border: 1px solid var(--vscode-panel-border);
    color: var(--vscode-foreground);
    border-radius: 3px;
    padding: 2px 6px;
    cursor: pointer;
    font-size: 10px;
    transition: all 0.2s ease;
  }
  .permission-btn:hover {
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
  }
  .permission-request {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--vscode-editorWidget-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    z-index: 1000;
    min-width: 300px;
    max-width: 500px;
  }
  .permission-content {
    padding: 16px;
  }
  .permission-title {
    font-size: 14px;
    font-weight: 600;
    color: var(--vscode-foreground);
    margin-bottom: 8px;
  }
  .permission-description {
    font-size: 12px;
    color: var(--vscode-descriptionForeground);
    margin-bottom: 16px;
    line-height: 1.4;
  }
  .permission-actions {
    display: flex;
    gap: 8px;
    justify-content: flex-end;
  }
  .permission-actions .permission-btn {
    padding: 6px 12px;
    font-size: 11px;
  }
  .permission-actions .permission-btn.allow {
    background: var(--vscode-button-background);
    color: var(--vscode-button-foreground);
    border-color: var(--vscode-button-background);
  }
  .permission-actions .permission-btn.deny {
    background: var(--vscode-errorBackground);
    color: var(--vscode-errorForeground);
    border-color: var(--vscode-errorForeground);
  }
  .permission-actions .permission-btn.remember {
    background: var(--vscode-textLink-foreground);
    color: var(--vscode-editor-background);
    border-color: var(--vscode-textLink-foreground);
  }

  /* Stream output styles */
  .stream-output {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 500px;
    max-height: 400px;
    background: var(--vscode-editor-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    z-index: 1000;
    display: flex;
    flex-direction: column;
  }

  .stream-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 16px;
    background: var(--vscode-panel-background);
    border-bottom: 1px solid var(--vscode-panel-border);
    border-radius: 8px 8px 0 0;
  }

  .stream-title {
    font-weight: 600;
    color: var(--vscode-foreground);
  }

  .stream-close {
    background: none;
    border: none;
    color: var(--vscode-foreground);
    font-size: 18px;
    cursor: pointer;
    padding: 4px 8px;
    border-radius: 4px;
  }

  .stream-close:hover {
    background: var(--vscode-toolbar-hoverBackground);
  }

  .stream-content {
    padding: 12px 16px;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    line-height: 1.4;
    color: var(--vscode-foreground);
    background: var(--vscode-editor-background);
    border-radius: 0 0 8px 8px;
    max-height: 300px;
    overflow-y: auto;
    white-space: pre-wrap;
    word-break: break-word;
  }

  .stream-line {
    margin: 2px 0;
  }

  .stream-line.error {
    color: var(--vscode-errorForeground);
  }

  .stream-line.success {
    color: var(--vscode-terminal-ansiGreen);
  }

  /* Terminal output styles */
  .terminal-output {
    position: fixed;
    bottom: 20px;
    left: 20px;
    width: 600px;
    max-height: 400px;
    background: var(--vscode-terminal-background);
    border: 1px solid var(--vscode-panel-border);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    z-index: 1000;
    display: flex;
    flex-direction: column;
  }

  .terminal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 16px;
    background: var(--vscode-terminal-background);
    border-bottom: 1px solid var(--vscode-panel-border);
    border-radius: 8px 8px 0 0;
  }

  .terminal-title {
    font-weight: 600;
    color: var(--vscode-terminal-foreground);
    font-family: 'Courier New', monospace;
  }

  .terminal-close {
    background: none;
    border: none;
    color: var(--vscode-terminal-foreground);
    font-size: 18px;
    cursor: pointer;
    padding: 4px 8px;
    border-radius: 4px;
  }

  .terminal-close:hover {
    background: var(--vscode-toolbar-hoverBackground);
  }

  .terminal-content {
    padding: 12px 16px;
    font-family: 'Courier New', monospace;
    font-size: 12px;
    line-height: 1.4;
    color: var(--vscode-terminal-foreground);
    background: var(--vscode-terminal-background);
    border-radius: 0 0 8px 8px;
    max-height: 300px;
    overflow-y: auto;
    white-space: pre-wrap;
    word-break: break-word;
  }

  .terminal-line {
    margin: 2px 0;
  }

  .terminal-line.command {
    color: var(--vscode-terminal-ansiGreen);
    font-weight: bold;
  }

  .terminal-line.output {
    color: var(--vscode-terminal-foreground);
  }

  .terminal-line.error {
    color: var(--vscode-terminal-ansiRed);
  }

  .terminal-line.success {
    color: var(--vscode-terminal-ansiGreen);
  }
</style>
</head>
<body>
  <div id="toolbar">
    <button id="new" class="icon-btn" title="New"><img src="${addIcon}" alt="+"/></button>
    <div id="tabs"></div>
  </div>
  <div id="messages"></div>
  <div id="cost-info" class="cost-info" style="display: none;">
    <span class="cost-label">Session Cost:</span>
    <span class="cost-value" id="session-cost">$0.00</span>
    <span class="tokens-info" id="tokens-info"></span>
    <button class="reset-btn" id="reset-cost">Reset</button>
    <span class="tokens-info" style="font-size: 9px; opacity: 0.7;">*Prices based on OpenAI API pricing</span>
  </div>
  <div id="permission-info" class="permission-info" style="display: none;">
    <span class="permission-label">Permissions:</span>
    <span class="permission-stats" id="permission-stats">0 allowed, 0 denied</span>
    <button class="permission-btn" id="permission-manage">Manage</button>
    <button class="permission-btn" id="permission-auto">Auto-approve</button>
  </div>
  <div id="permission-request" class="permission-request" style="display: none;">
    <div class="permission-content">
      <div class="permission-title">Permission Request</div>
      <div class="permission-description" id="permission-description"></div>
      <div class="permission-actions">
        <button class="permission-btn allow" id="permission-allow">Allow</button>
        <button class="permission-btn deny" id="permission-deny">Deny</button>
        <button class="permission-btn remember" id="permission-remember">Allow & Remember</button>
      </div>
    </div>
  </div>
  <div id="stream-output" class="stream-output" style="display: none;">
    <div class="stream-header">
      <span class="stream-title">Command Output</span>
      <button class="stream-close" id="stream-close">×</button>
    </div>
    <div class="stream-content" id="stream-content"></div>
  </div>
  <div id="terminal-output" class="terminal-output" style="display: none;">
    <div class="terminal-header">
      <span class="terminal-title">Terminal</span>
      <button class="terminal-close" id="terminal-close">×</button>
    </div>
    <div class="terminal-content" id="terminal-content"></div>
  </div>
  <form id="form">
    <div class="input-container">
      <div class="input-header">
        <button type="button" id="file-upload-btn" title="Add file">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66L9.64 16.2a2 2 0 0 1-2.83-2.83l8.49-8.49"></path>
          </svg>
          <span>Add file</span>
        </button>
        <input type="file" id="file-input" multiple accept="image/*,.txt,.md,.js,.ts,.py,.json,.xml,.csv,.pdf" style="display: none;">
      </div>
      <textarea id="prompt" placeholder="Ask the OpenAI Agent... (Ctrl+Enter for new line, Enter to send, Ctrl+V to paste images)" rows="1"></textarea>
    </div>
    <button type="submit">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="22" y1="2" x2="11" y2="13"></line>
        <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
      </svg>
      Send
    </button>
  </form>
  <div id="mode-selector">
    <label for="mode-select">Mode:</label>
    <select id="mode-select">
      <option value="agent">🤖 Agent (Auto-suggestions)</option>
      <option value="ask">❓ Ask (Manual questions)</option>
    </select>
    <label for="model-select">Model:</label>
    <select id="model-select">
      <option value="gpt-4o">GPT-4o</option>
      <option value="gpt-4o-mini">GPT-4o Mini</option>
      <option value="gpt-4-turbo">GPT-4 Turbo</option>
      <option value="gpt-4-turbo-preview">GPT-4 Turbo Preview</option>
      <option value="gpt-4">GPT-4</option>
      <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
    </select>
  </div>
  <div class="paste-hint">
    💡 Tip: You can paste images directly with Ctrl+V
  </div>
  <script>
    // Basic initialization
    const vscode = acquireVsCodeApi();
      
      const messages = document.getElementById('messages');
      const form = document.getElementById('form');
      const prompt = document.getElementById('prompt');
      const btnNew = document.getElementById('new');
      const tabs = document.getElementById('tabs');
      const modeSelect = document.getElementById('mode-select');
      const modelSelect = document.getElementById('model-select');
      const fileInput = document.getElementById('file-input');
      const fileUploadBtn = document.getElementById('file-upload-btn');
      const costInfo = document.getElementById('cost-info');
      const sessionCostEl = document.getElementById('session-cost');
      const tokensInfoEl = document.getElementById('tokens-info');
      const resetCostBtn = document.getElementById('reset-cost');
      const clearIcon = '${clearIcon}';
      const deleteIcon = '${deleteIcon}';
    
      // Store attached files
      let attachedFiles = [];
      
      // Cost tracking
      let sessionCost = 0;
      let lastTokens = { input: 0, output: 0, total: 0 };
      let lastModel = '';

      // Cost display functions
      function updateCostDisplay(cost, totalCost, tokens, model) {
        sessionCost = totalCost;
        lastTokens = tokens;
        lastModel = model;
        
        sessionCostEl.textContent = '$' + totalCost.toFixed(4);
        tokensInfoEl.textContent = 'Last: ' + tokens.input + '→' + tokens.output + ' tokens (' + model + ')';
        
        if (totalCost > 0) {
          costInfo.style.display = 'flex';
        }
      }

      function resetCost() {
        sessionCost = 0;
        lastTokens = { input: 0, output: 0, total: 0 };
        lastModel = '';
        
        sessionCostEl.textContent = '$0.00';
        tokensInfoEl.textContent = '';
        costInfo.style.display = 'none';
        
        vscode.postMessage({ type: 'resetSessionCost' });
      }

    // File handling functions
    function createFilePreview(file) {
      return new Promise((resolve) => {
        if (file.type.startsWith('image/')) {
          const reader = new FileReader();
          reader.onload = (e) => resolve(e.target.result);
          reader.readAsDataURL(file);
        } else {
          resolve(null);
        }
      });
    }

    function addAttachedFile(file) {
      createFilePreview(file).then(preview => {
        attachedFiles.push({ file, preview });
        updateAttachedFilesDisplay();
        
        // Show brief notification for pasted images
        if (file.type.startsWith('image/')) {
          showPasteNotification('Image pasted from clipboard');
        }
      });
    }

    function showPasteNotification(message) {
      // Create a temporary notification
      const notification = document.createElement('div');
      notification.style.cssText = 
        'position: fixed;' +
        'top: 20px;' +
        'right: 20px;' +
        'background: var(--vscode-button-background);' +
        'color: var(--vscode-button-foreground);' +
        'padding: 8px 16px;' +
        'border-radius: 4px;' +
        'font-size: 12px;' +
        'z-index: 1000;' +
        'box-shadow: 0 2px 8px rgba(0,0,0,0.2);' +
        'opacity: 0;' +
        'transition: opacity 0.3s ease;';
      notification.textContent = message;
      document.body.appendChild(notification);
      
      // Fade in
      setTimeout(() => notification.style.opacity = '1', 10);
      
      // Fade out and remove
      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => document.body.removeChild(notification), 300);
      }, 2000);
    }

    function removeAttachedFile(index) {
      attachedFiles.splice(index, 1);
      updateAttachedFilesDisplay();
    }

    function updateAttachedFilesDisplay() {
      const existingDisplay = document.querySelector('.attached-files');
      if (existingDisplay) {
        existingDisplay.remove();
      }

      if (attachedFiles.length === 0) return;

      const filesContainer = document.createElement('div');
      filesContainer.className = 'attached-files';
      
      attachedFiles.forEach((fileData, index) => {
        const fileEl = document.createElement('div');
        fileEl.className = 'attached-file';
        
        if (fileData.preview) {
          const img = document.createElement('img');
          img.src = fileData.preview;
          img.alt = fileData.file.name;
          fileEl.appendChild(img);
        }
        
        const nameSpan = document.createElement('span');
        nameSpan.className = 'file-name';
        nameSpan.textContent = fileData.file.name;
        fileEl.appendChild(nameSpan);
        
        const removeBtn = document.createElement('button');
        removeBtn.className = 'remove-btn';
        removeBtn.innerHTML = '×';
        removeBtn.onclick = () => removeAttachedFile(index);
        fileEl.appendChild(removeBtn);
        
        filesContainer.appendChild(fileEl);
      });
      
      // Insert inside the input-container, before the textarea
      const inputContainer = document.querySelector('.input-container');
      inputContainer.insertBefore(filesContainer, prompt);
    }

    let state = vscode.getState() || {}; if (!state.histories) state.histories = {}; if (typeof state.active === 'undefined') state.active = null;

    // Initialize model selector with current value
    vscode.postMessage({ type: 'getCurrentModel' });

    function setActive(id){ state.active = id; vscode.setState(state); }

    function renderTabs(info){
      console.log('renderTabs called with info:', info);
      tabs.innerHTML='';
      
      if (!info || !info.threads || info.threads.length === 0) {
        console.log('No threads to render');
        return;
      }
      
      console.log('Rendering', info.threads.length, 'threads');
      
      (info.threads||[]).forEach(id => {
        const el = document.createElement('div');
        el.className = 'tab' + (id === info.active ? ' active' : '');
        
        // Show thread name if available, otherwise show first 6 chars of ID
        const threadName = (info.threadNames && info.threadNames[id]) || id.slice(0,6);
        
        // Create tab content
        const tabContent = document.createElement('span');
        tabContent.textContent = threadName;
        tabContent.title = 'Thread: ' + id;
        
        // Create actions container
        const actions = document.createElement('div');
        actions.className = 'tab-actions';
        
        // Clear button
        const clearBtn = document.createElement('button');
        clearBtn.className = 'tab-btn';
        clearBtn.title = 'Clear thread';
        clearBtn.innerHTML = '<img src="' + clearIcon + '" alt="Clear"/>';
        clearBtn.onclick = function(e) { 
          e.stopPropagation(); 
          if (state.active === id) {
            state.histories[id] = []; 
            vscode.setState(state); 
            clearUI(); 
          }
        };
        
        // Close button
        const closeBtn = document.createElement('button');
        closeBtn.className = 'tab-btn';
        closeBtn.title = 'Close thread';
        closeBtn.innerHTML = '<img src="' + deleteIcon + '" alt="Close"/>';
        closeBtn.onclick = function(e) { 
          e.stopPropagation(); 
          vscode.postMessage({ type:'closeThread', id: id }); 
        };
        
        // Add elements to tab
        actions.appendChild(clearBtn);
        actions.appendChild(closeBtn);
        el.appendChild(tabContent);
        el.appendChild(actions);
        
        // Tab click handler
        el.onclick = function() { 
          showLoading('Switching to thread...', true);
          vscode.postMessage({ type:'switchThread', id: id }); 
        };
        el.addEventListener('dblclick', function() { 
          var newName = prompt('Enter thread name:', threadName);
          if (newName && newName.trim()) {
            vscode.postMessage({ type:'setThreadName', id: id, name: newName.trim() });
          }
        });
        
        tabs.appendChild(el);
      });
      setActive(info.active || null);
    }

    function clearUI(){ messages.innerHTML=''; }

    function showLoading(text = 'Loading chat history...', showStopButton = false, blockForm = false) {
      clearUI();
      const loadingEl = document.createElement('div');
      loadingEl.className = 'loading';
      
      let stopButtonHtml = '';
      if (showStopButton) {
        stopButtonHtml = '<button class="loading-stop" onclick="stopAI()">Stop</button>';
      }
      
      loadingEl.innerHTML = '<div class="loading-spinner"></div><span class="loading-text">' + text + '</span>' + stopButtonHtml;
      messages.appendChild(loadingEl);
      
      if (blockForm) {
        setFormEnabled(false);
      }
    }

    function hideLoading() {
      const loadingEl = messages.querySelector('.loading');
      if (loadingEl) {
        loadingEl.remove();
      }
      setFormEnabled(true);
    }

    function stopAI() {
      console.log('stopAI called');
      hideLoading();
      removeThinking();
      setFormEnabled(true);
      vscode.postMessage({ type: 'stopAI' });
      append('assistant', 'Operation stopped by user', true);
    }

    function setFormEnabled(enabled) {
      console.log('setFormEnabled called with:', enabled);
      const prompt = document.getElementById('prompt');
      // Try to find submit button, if not found try to find any button that's not file-upload-btn
      let submitBtn = document.querySelector('#form button[type="submit"]');
      if (!submitBtn) {
        submitBtn = document.querySelector('#form button:not(#file-upload-btn)');
      }
      const form = document.getElementById('form');
      
      console.log('Found submitBtn:', submitBtn);
      console.log('All buttons in form:', document.querySelectorAll('#form button'));
      
      if (prompt) {
        prompt.disabled = !enabled;
        prompt.placeholder = enabled ? 'Ask the OpenAI Agent...' : 'AI is thinking, please wait...';
      }
      if (submitBtn) {
        console.log('Current button type:', submitBtn.type);
        console.log('Current button innerHTML:', submitBtn.innerHTML);
        if (enabled) {
          console.log('Setting button to Send');
          submitBtn.disabled = false;
          submitBtn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22,2 15,22 11,13 2,9 22,2"></polygon></svg>Send';
          submitBtn.onclick = null;
          submitBtn.type = 'submit';
          console.log('Button set to Send, new type:', submitBtn.type);
        } else {
          console.log('Setting button to Stop');
          submitBtn.disabled = false;
          submitBtn.innerHTML = '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="6" y="6" width="12" height="12" rx="2"></rect><line x1="9" y1="9" x2="15" y2="15"></line><line x1="15" y1="9" x2="9" y2="15"></line></svg>Stop';
          submitBtn.onclick = function(e) { e.preventDefault(); stopAI(); };
          submitBtn.type = 'button';
          console.log('Button set to Stop, new type:', submitBtn.type);
        }
      } else {
        console.error('Submit button not found!');
      }
      if (form) {
        if (enabled) {
          form.classList.remove('loading');
        } else {
          form.classList.add('loading');
        }
      }
    }

    // Make stopAI globally available
    window.stopAI = stopAI;

    function renderHistory(history = []){
      clearUI();
      // History is passed from server, not from local state
      history.forEach(m => append(m.role, m.content, false));
    }

    function append(role, content, save=true, files=[]) {
      console.log('append called with role:', role);
      
      // Safety checks
      if (!content) content = '';
      if (typeof content !== 'string') content = String(content);
      
      // Create elements
      const el = document.createElement('div');
      el.className = 'msg ' + role;
      
      const contentDiv = document.createElement('div');
      contentDiv.className = 'msg-content';
      
      const roleDiv = document.createElement('div');
      roleDiv.className = 'msg-role';
      roleDiv.textContent = role === 'assistant' ? 'AI:' : 'You:';
      
      const textDiv = document.createElement('div');
      textDiv.className = 'msg-text';
      
      // Safely escape HTML and convert line breaks
      const safeContent = content
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
        
      // Use textContent first, then set innerHTML for line breaks
      textDiv.textContent = '';
      
      // Split by line breaks and add them manually
      const lines = safeContent.split('\n');
      for (let i = 0; i < lines.length; i++) {
        if (i > 0) {
          textDiv.appendChild(document.createElement('br'));
        }
        textDiv.appendChild(document.createTextNode(lines[i]));
      }
      
      contentDiv.appendChild(roleDiv);
      contentDiv.appendChild(textDiv);
      
      // Add file attachments if any
      if (files && files.length > 0) {
        const filesDiv = document.createElement('div');
        filesDiv.className = 'attached-files';
        
        files.forEach(fileData => {
          const fileEl = document.createElement('div');
          fileEl.className = 'attached-file';
          
          if (fileData.preview) {
            const img = document.createElement('img');
            img.src = fileData.preview;
            img.alt = fileData.file.name;
            img.className = 'file-preview';
            fileEl.appendChild(img);
          }
          
          const nameSpan = document.createElement('span');
          nameSpan.className = 'file-name';
          nameSpan.textContent = fileData.file.name;
          fileEl.appendChild(nameSpan);
          
          filesDiv.appendChild(fileEl);
        });
        
        contentDiv.appendChild(filesDiv);
      }
      
      el.appendChild(contentDiv);
      console.log('Appending element to messages:', el);
      messages.appendChild(el);
      console.log('Messages children count after append:', messages.children.length);
      messages.scrollTop = messages.scrollHeight;
      console.log('Scroll position set to:', messages.scrollTop);
      // Note: History is now stored on OpenAI server, not locally
      // Local state is only used for UI state and thinking process
    }

    function appendThinking(content) {
      const el = document.createElement('div');
      el.className = 'thinking';
      
      const header = document.createElement('div');
      header.className = 'thinking-header';
      header.innerHTML = '<svg class="thinking-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/></svg>AI is thinking...';
      
      const contentDiv = document.createElement('div');
      contentDiv.className = 'thinking-content';
      contentDiv.textContent = content;
      
      el.appendChild(header);
      el.appendChild(contentDiv);
      messages.appendChild(el);
      messages.scrollTop = messages.scrollHeight;
    }

    function updateThinking(content) {
      const thinkingEl = messages.querySelector('.thinking .thinking-content');
      if (thinkingEl) {
        thinkingEl.textContent = content;
        messages.scrollTop = messages.scrollHeight;
      }
    }

    function removeThinking() {
      const thinkingEl = messages.querySelector('.thinking');
      if (thinkingEl) {
        thinkingEl.remove();
      }
    }

    window.addEventListener('message', (event) => {
      const msg = event.data;
      if (msg.type === 'append') {
        console.log('Received append message, restoring form');
        console.log('Message content:', msg.content);
        console.log('Message role:', msg.role);
        hideLoading();
        removeThinking();
        console.log('About to call setFormEnabled(true)');
        setFormEnabled(true);
        console.log('About to call append with:', { role: msg.role, content: msg.content });
        append(msg.role, msg.content, true);
        console.log('append call completed');
      } else if (msg.type === 'thinking') {
        hideLoading();
        setFormEnabled(false);
        if (msg.content) {
          appendThinking(msg.content);
        }
      } else if (msg.type === 'updateThinking') {
        if (msg.content) {
          updateThinking(msg.content);
        }
      } else if (msg.type === 'error') {
        hideLoading();
        removeThinking();
        setFormEnabled(true);
        append('assistant', 'Error: ' + msg.message, true);
      } else if (msg.type === 'threads') {
        console.log('Received threads message:', msg);
        const ids = (msg.info && msg.info.threads) || [];
        const active = (msg.info && msg.info.active) || null;
        console.log('Thread IDs:', ids);
        console.log('Active thread:', active);
        if (!active || !ids.includes(active)) { state.active = ids.length ? ids[ids.length-1] : null; vscode.setState(state); }
        console.log('State active after update:', state.active);
        renderTabs(msg.info);
        // Always load history from server
        if (state.active) {
          console.log('Showing loading for active thread:', state.active);
          showLoading('Loading chat history...', true);
        }
      } else if (msg.type === 'loadHistory') {
        // Load history from server
        hideLoading();
        if (state.active && msg.history) {
          renderHistory(msg.history);
        }
      } else if (msg.type === 'clear') {
        hideLoading();
        clearUI();
      } else if (msg.type === 'restoreForm') {
        console.log('Received restoreForm message, restoring form');
        hideLoading();
        removeThinking();
        setFormEnabled(true);
      } else if (msg.type === 'modeChanged') {
        console.log('Mode changed to:', msg.mode);
        // Update the select element to reflect the new mode
        if (modeSelect) {
          modeSelect.value = msg.mode;
        }
      } else if (msg.type === 'modelChanged') {
        console.log('Model changed to:', msg.model);
        // Update the select element to reflect the new model
        if (modelSelect) {
          modelSelect.value = msg.model;
        }
      } else if (msg.type === 'costUpdate') {
        console.log('Cost update:', msg);
        updateCostDisplay(msg.cost, msg.totalCost, msg.tokens, msg.model);
      } else if (msg.type === 'sessionCost') {
        console.log('Session cost:', msg.cost);
        sessionCost = msg.cost;
        sessionCostEl.textContent = '$' + msg.cost.toFixed(4);
        if (msg.cost > 0) {
          costInfo.style.display = 'flex';
        }
      } else if (msg.type === 'requestPermission') {
        console.log('Permission request:', msg);
        showPermissionRequest(msg.command, msg.description);
      } else if (msg.type === 'permissionStats') {
        console.log('Permission stats:', msg.stats);
        const stats = msg.stats;
        const permissionStatsEl = document.getElementById('permission-stats');
        const permissionAutoEl = document.getElementById('permission-auto');
        if (permissionStatsEl) {
          permissionStatsEl.textContent = stats.allowed + ' allowed, ' + stats.denied + ' denied';
        }
        if (permissionAutoEl) {
          if (stats.autoApprove) {
            permissionAutoEl.textContent = 'Disable Auto-approve';
          } else {
            permissionAutoEl.textContent = 'Auto-approve';
          }
        }
      } else if (msg.type === 'allPermissions') {
        console.log('All permissions:', msg.permissions);
        // TODO: Show permissions management dialog
      } else if (msg.type === 'autoApproveChanged') {
        console.log('Auto-approve changed:', msg.enabled);
        const permissionAutoEl = document.getElementById('permission-auto');
        if (permissionAutoEl) {
          if (msg.enabled) {
            permissionAutoEl.textContent = 'Disable Auto-approve';
          } else {
            permissionAutoEl.textContent = 'Auto-approve';
          }
        }
      } else if (msg.type === 'permissionsCleared') {
        console.log('Permissions cleared');
        vscode.postMessage({ type: 'getPermissionStats' });
      } else if (msg.type === 'permissionRemoved') {
        console.log('Permission removed:', msg.command);
        vscode.postMessage({ type: 'getPermissionStats' });
      } else if (msg.type === 'streamOutput') {
        console.log('Stream output:', msg);
        showStreamOutput();
        appendStreamOutput(msg.output, msg.isError);
      } else if (msg.type === 'terminalOutput') {
        console.log('Terminal output:', msg);
        showTerminalOutput();
        if (msg.command) {
          appendTerminalCommand(msg.command);
        }
        if (msg.output) {
          appendTerminalOutput(msg.output, msg.type || 'output');
        }
      } else if (msg.type === 'terminalCommand') {
        console.log('Terminal command:', msg);
        showTerminalOutput();
        appendTerminalCommand(msg.command);
      }
    });

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const value = prompt.value || '';
      if (!value.trim() && attachedFiles.length === 0) return;
      
      // If already processing, stop current operation and start new one
      if (document.querySelector('.thinking')) {
        stopAI();
        // Small delay to ensure stop is processed
        setTimeout(() => {
          sendMessageWithFiles(value);
        }, 100);
      } else {
        sendMessageWithFiles(value);
      }
    });

    async function sendMessageWithFiles(text) {
      // Read file contents
      const filesWithContent = await Promise.all(attachedFiles.map(async (fileData) => {
        const content = await readFileContent(fileData.file);
        console.log('File content for', fileData.file.name, ':', content);
        return {
          name: fileData.file.name,
          type: fileData.file.type,
          size: fileData.file.size,
          content: content
        };
      }));
      
      console.log('Sending files with content:', filesWithContent);

      // Store files for display before clearing
      const filesToDisplay = [...attachedFiles];
      
      // Clear form first
      prompt.value = '';
      attachedFiles = [];
      updateAttachedFilesDisplay();
      
      // Display user message with files
      append('user', text, false, filesToDisplay);
      
      // Force clear any remaining file displays
      const existingDisplay = document.querySelector('.attached-files');
      if (existingDisplay) {
        existingDisplay.remove();
      }
      
      setFormEnabled(false);
      
      // Send to backend
      vscode.postMessage({ 
        type: 'sendPrompt', 
        prompt: text,
        files: filesWithContent
      });
    }

    function readFileContent(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        
        reader.onload = function(e) {
          let content = e.target.result;
          
          // For images, we already have the preview, so we can use that
          if (file.type.startsWith('image/')) {
            resolve({
              type: 'image',
              data: content, // base64 data URL
              description: 'Image file: ' + file.name + ' (' + file.type + ', ' + Math.round(file.size/1024) + 'KB)'
            });
          } else if (file.type.startsWith('text/') || 
                     file.name.endsWith('.js') || 
                     file.name.endsWith('.ts') || 
                     file.name.endsWith('.py') || 
                     file.name.endsWith('.json') || 
                     file.name.endsWith('.md') || 
                     file.name.endsWith('.txt') ||
                     file.name.endsWith('.html') ||
                     file.name.endsWith('.css') ||
                     file.name.endsWith('.xml')) {
            // For text files, read as text
            resolve({
              type: 'text',
              content: content,
              description: 'Text file: ' + file.name + ' (' + file.type + ', ' + Math.round(file.size/1024) + 'KB)'
            });
          } else {
            // For other files, just provide metadata
            resolve({
              type: 'binary',
              description: 'File: ' + file.name + ' (' + file.type + ', ' + Math.round(file.size/1024) + 'KB) - Binary content not readable'
            });
          }
        };
        
        reader.onerror = function() {
          reject(new Error('Failed to read file'));
        };
        
        if (file.type.startsWith('image/')) {
          reader.readAsDataURL(file);
        } else {
          reader.readAsText(file);
        }
      });
    }

    btnNew.addEventListener('click', () => {
      showLoading('Creating new thread...');
      vscode.postMessage({ type:'newThread' });
    });

    // Handle mode switching
    modeSelect.addEventListener('change', (e) => {
      const selectedMode = e.target.value;
      vscode.postMessage({ type: 'setMode', mode: selectedMode });
    });

    // Handle model switching
    modelSelect.addEventListener('change', (e) => {
      const selectedModel = e.target.value;
      vscode.postMessage({ type: 'setModel', model: selectedModel });
    });

    // Handle cost reset
    resetCostBtn.addEventListener('click', () => {
      resetCost();
    });

    // Permission handling
    const permissionInfo = document.getElementById('permission-info');
    const permissionStats = document.getElementById('permission-stats');
    const permissionManage = document.getElementById('permission-manage');
    const permissionAuto = document.getElementById('permission-auto');
    const permissionRequest = document.getElementById('permission-request');
    const permissionDescription = document.getElementById('permission-description');
    const permissionAllow = document.getElementById('permission-allow');
    const permissionDeny = document.getElementById('permission-deny');
    const permissionRemember = document.getElementById('permission-remember');

    let currentPermissionCommand = '';

    // Show permission info
    function showPermissionInfo() {
      permissionInfo.style.display = 'flex';
      vscode.postMessage({ type: 'getPermissionStats' });
    }

    // Hide permission info
    function hidePermissionInfo() {
      permissionInfo.style.display = 'none';
    }

    // Show permission request
    function showPermissionRequest(command, description) {
      currentPermissionCommand = command;
      permissionDescription.textContent = description;
      permissionRequest.style.display = 'block';
    }

    // Hide permission request
    function hidePermissionRequest() {
      permissionRequest.style.display = 'none';
      currentPermissionCommand = '';
    }

    // Handle permission responses
    permissionAllow.addEventListener('click', () => {
      vscode.postMessage({ 
        type: 'permissionResponse', 
        command: currentPermissionCommand, 
        allowed: true 
      });
      hidePermissionRequest();
    });

    permissionDeny.addEventListener('click', () => {
      vscode.postMessage({ 
        type: 'permissionResponse', 
        command: currentPermissionCommand, 
        allowed: false 
      });
      hidePermissionRequest();
    });

    permissionRemember.addEventListener('click', () => {
      vscode.postMessage({ 
        type: 'permissionResponse', 
        command: currentPermissionCommand, 
        allowed: true,
        remember: true 
      });
      hidePermissionRequest();
    });

    // Handle permission management
    permissionManage.addEventListener('click', () => {
      vscode.postMessage({ type: 'getAllPermissions' });
    });

    // Handle auto-approve toggle
    permissionAuto.addEventListener('click', () => {
      const isAuto = permissionAuto.textContent === 'Auto-approve';
      vscode.postMessage({ type: 'setAutoApprove', enabled: !isAuto });
    });

    // Show permission info by default
    showPermissionInfo();

    // Stream output handling
    const streamOutput = document.getElementById('stream-output');
    const streamContent = document.getElementById('stream-content');
    const streamClose = document.getElementById('stream-close');

    function showStreamOutput() {
      streamOutput.style.display = 'flex';
    }

    function hideStreamOutput() {
      streamOutput.style.display = 'none';
      streamContent.textContent = '';
    }

    function appendStreamOutput(output, isError = false) {
      const line = document.createElement('div');
      line.className = 'stream-line' + (isError ? ' error' : '');
      line.textContent = output;
      streamContent.appendChild(line);
      streamContent.scrollTop = streamContent.scrollHeight;
    }

    // Handle stream close button
    streamClose.addEventListener('click', hideStreamOutput);

    // Terminal output handling
    const terminalOutput = document.getElementById('terminal-output');
    const terminalContent = document.getElementById('terminal-content');
    const terminalClose = document.getElementById('terminal-close');

    function showTerminalOutput() {
      terminalOutput.style.display = 'flex';
    }

    function hideTerminalOutput() {
      terminalOutput.style.display = 'none';
      terminalContent.textContent = '';
    }

    function appendTerminalOutput(output, type = 'output') {
      const line = document.createElement('div');
      line.className = 'terminal-line ' + type;
      line.textContent = output;
      terminalContent.appendChild(line);
      terminalContent.scrollTop = terminalContent.scrollHeight;
    }

    function appendTerminalCommand(command) {
      appendTerminalOutput('$ ' + command, 'command');
    }

    // Handle terminal close button
    terminalClose.addEventListener('click', hideTerminalOutput);

    // Handle file upload
    fileUploadBtn.addEventListener('click', () => {
      fileInput.click();
    });

    fileInput.addEventListener('change', (e) => {
      const files = Array.from(e.target.files);
      files.forEach(file => {
        // Check file size (limit to 10MB)
        if (file.size > 10 * 1024 * 1024) {
          alert('File size too large. Please select files smaller than 10MB.');
          return;
        }
        addAttachedFile(file);
      });
      // Clear the input so the same file can be selected again
      e.target.value = '';
    });

    // Handle Enter and Ctrl+Enter for textarea
    prompt.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        if (e.ctrlKey) {
          // Ctrl+Enter: Add new line
          e.preventDefault();
          const start = prompt.selectionStart;
          const end = prompt.selectionEnd;
          const value = prompt.value;
          prompt.value = value.substring(0, start) + '\n' + value.substring(end);
          prompt.selectionStart = prompt.selectionEnd = start + 1;
          autoResize();
        } else {
          // Enter: Send message
          e.preventDefault();
          form.dispatchEvent(new Event('submit'));
        }
      }
    });

    // Auto-resize textarea based on content
    function autoResize() {
      prompt.style.height = 'auto';
      const scrollHeight = prompt.scrollHeight;
      const maxHeight = 36; // max-height from CSS (1.5 lines)
      prompt.style.height = Math.min(scrollHeight, maxHeight) + 'px';
    }

    // Auto-resize on input
    prompt.addEventListener('input', autoResize);

    // Handle paste events for images
    function handlePasteEvent(e) {
      const clipboardData = e.clipboardData || window.clipboardData;
      if (!clipboardData) return;

      const items = clipboardData.items;
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        if (item.type.indexOf('image') !== -1) {
          e.preventDefault();
          const file = item.getAsFile();
          if (file) {
            // Check file size (limit to 10MB)
            if (file.size > 10 * 1024 * 1024) {
              alert('Image too large. Please select images smaller than 10MB.');
              return;
            }
            addAttachedFile(file);
            console.log('Image pasted from clipboard:', file.name, file.type, file.size);
          }
        }
      }
    }

    // Add paste event listeners to both prompt and messages area
    prompt.addEventListener('paste', handlePasteEvent);
    messages.addEventListener('paste', handlePasteEvent);

    // Initial resize
    autoResize();
  </script>
</body>
</html>`;
  }
}
