import * as vscode from 'vscode';
import { OpenAIService } from './openAIService';
import { EditorService } from './editorService';

export class SuggestionService implements vscode.CompletionItemProvider {
  private openAIService: OpenAIService;
  private editorService: EditorService;
  private isProcessing: boolean = false;
  private statusBarItem: vscode.StatusBarItem;
  
  constructor(openAIService: OpenAIService, editorService: EditorService) {
    this.openAIService = openAIService;
    this.editorService = editorService;
    
    // Create status bar item
    this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
    this.statusBarItem.text = "$(sparkle) AI Ready";
    this.statusBarItem.tooltip = "OpenAI Agent is ready for code suggestions";
    this.statusBarItem.show();
  }
  
  async provideCompletionItems(
    document: vscode.TextDocument,
    position: vscode.Position,
    token: vscode.CancellationToken,
    context: vscode.CompletionContext
  ): Promise<vscode.CompletionItem[] | vscode.CompletionList | null> {
    // Check if we're already processing a suggestion to avoid multiple simultaneous requests
    if (this.isProcessing) {
      return null;
    }
    
    try {
      this.isProcessing = true;
      this.statusBarItem.text = "$(sync~spin) AI Thinking...";
      
      // Get context to provide to OpenAI
      const contextBeforeCursor = this.editorService.getContextBeforeCursor(30); // Increased context
      
      // Only generate suggestions for files with some content
      if (!contextBeforeCursor.trim()) {
        return null;
      }
      
      // Get file language
      const languageId = document.languageId;
      
      // Get completion from OpenAI
      const completion = await this.openAIService.getCompletion(contextBeforeCursor, languageId);
      
      if (!completion) {
        return null;
      }
      
      // Create completion item
      const item = new vscode.CompletionItem(completion, vscode.CompletionItemKind.Text);
      item.insertText = completion;
      item.detail = "OpenAI suggestion";
      item.documentation = new vscode.MarkdownString("Generated by OpenAI Assistant");
      item.sortText = "0"; // Give it high priority
      
      return [item];
    } catch (error: any) {
      console.error('Error generating suggestions:', error);
      vscode.window.showErrorMessage(`Error generating suggestions: ${error.message}`);
      return null;
    } finally {
      this.isProcessing = false;
      this.statusBarItem.text = "$(sparkle) AI Ready";
    }
  }
  
  public registerInlineCompletionProvider(): vscode.Disposable | undefined {
    // Check if VS Code version supports inline completion
    if (!vscode.languages.registerInlineCompletionItemProvider) {
      return undefined;
    }
    
    // Use 'this' reference for access to class members inside the provider
    const self = this;
    
    return vscode.languages.registerInlineCompletionItemProvider(
      { pattern: '**' },
      {
        async provideInlineCompletionItems(
          document: vscode.TextDocument,
          position: vscode.Position,
          context: vscode.InlineCompletionContext,
          token: vscode.CancellationToken
        ): Promise<vscode.InlineCompletionItem[] | vscode.InlineCompletionList | null> {
          if (self.isProcessing) {
            return null;
          }
          
          try {
            self.isProcessing = true;
            self.statusBarItem.text = "$(sync~spin) AI Thinking...";
            
            // Get context to provide to OpenAI
            const contextBeforeCursor = self.editorService.getContextBeforeCursor(30);
            
            if (!contextBeforeCursor.trim()) {
              return null;
            }
            
            // Get completion from OpenAI
            const completion = await self.openAIService.getCompletion(
              contextBeforeCursor,
              document.languageId
            );
            
            if (!completion) {
              return null;
            }
            
            return [new vscode.InlineCompletionItem(
              completion,
              new vscode.Range(position, position)
            )];
          } catch (error: any) {
            console.error('Error generating inline suggestions:', error);
            return null;
          } finally {
            self.isProcessing = false;
            self.statusBarItem.text = "$(sparkle) AI Ready";
          }
        }
      }
    );
  }
  
  public dispose() {
    this.statusBarItem.dispose();
  }
  
  public async resetAssistantThread(): Promise<void> {
    try {
      await this.openAIService.resetThread();
      vscode.window.showInformationMessage('OpenAI Agent context has been reset');
    } catch (error: any) {
      vscode.window.showErrorMessage(`Failed to reset context: ${error.message}`);
    }
  }
}
