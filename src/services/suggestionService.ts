import * as vscode from 'vscode';
import { OpenAIServiceInterface } from './openAIServiceInterface';
import { EditorService } from './editorService';

export class SuggestionService implements vscode.CompletionItemProvider {
  private mode: "agent" | "ask" = "agent";
  private openAIService: OpenAIServiceInterface;
  private editorService: EditorService;
  private isProcessing: boolean = false;
  private statusBarItem: vscode.StatusBarItem;
  
  constructor(openAIService: OpenAIServiceInterface, editorService: EditorService) {
    this.openAIService = openAIService;
    this.editorService = editorService;
    
    // Create status bar item
    this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);
    this.statusBarItem.text = "$(sparkle) AI Ready";
    this.statusBarItem.tooltip = "OpenAI Agent is ready for code suggestions";
    this.statusBarItem.show();
  }
  
  async provideCompletionItems(
    document: vscode.TextDocument,
    position: vscode.Position,
    token: vscode.CancellationToken,
    context: vscode.CompletionContext
  ): Promise<vscode.CompletionItem[] | vscode.CompletionList | null> {
    // Check if we're already processing a suggestion to avoid multiple simultaneous requests
    if (this.isProcessing) {
      return null;
    }
    
    if (this.mode !== "agent") { return null; }
    try {
      this.isProcessing = true;
      this.statusBarItem.text = "$(sync~spin) AI Thinking...";
      
      // Get context to provide to OpenAI
      const contextBeforeCursor = this.editorService.getContextBeforeCursor(30); // Increased context
      
      // Only generate suggestions for files with some content
      if (!contextBeforeCursor.trim()) {
        return null;
      }
      
      // Get file language
      const languageId = document.languageId;
      
      // Get completion from OpenAI
      const completion = await this.openAIService.getCompletion(contextBeforeCursor, languageId);
      
      if (!completion) {
        return null;
      }
      
      // Create completion item
      const item = new vscode.CompletionItem(completion, vscode.CompletionItemKind.Text);
      item.insertText = completion;
      item.detail = "OpenAI suggestion";
      item.documentation = new vscode.MarkdownString("Generated by OpenAI Assistant");
      item.sortText = "0"; // Give it high priority
      
      return [item];
    } catch (error: any) {
      console.error('Error generating suggestions:', error);
      vscode.window.showErrorMessage(`Error generating suggestions: ${error.message}`);
      return null;
    } finally {
      this.isProcessing = false;
      this.statusBarItem.text = "$(sparkle) AI Ready";
    }
  }
  
  public registerInlineCompletionProvider(): vscode.Disposable | undefined {
    // Check if VS Code version supports inline completion
    if (!vscode.languages.registerInlineCompletionItemProvider) {
      return undefined;
    }
    
    // Use 'this' reference for access to class members inside the provider
    const self = this;
    
    return vscode.languages.registerInlineCompletionItemProvider(
      { pattern: '**' },
      {
        async provideInlineCompletionItems(
          document: vscode.TextDocument,
          position: vscode.Position,
          context: vscode.InlineCompletionContext,
          token: vscode.CancellationToken
        ): Promise<vscode.InlineCompletionItem[] | vscode.InlineCompletionList | null> {
          if (self.isProcessing) {
            return null;
          }
          
          try {
            self.isProcessing = true;
            self.statusBarItem.text = "$(sync~spin) AI Thinking...";
            
            // Get context to provide to OpenAI
            const contextBeforeCursor = self.editorService.getContextBeforeCursor(50);
            
            // Only generate suggestions for files with some content
            if (!contextBeforeCursor.trim()) {
              return null;
            }
            
            // Get file language
            const languageId = document.languageId;
            
            // Get completion from OpenAI
            const completion = await self.openAIService.getCompletion(contextBeforeCursor, languageId);
            
            if (!completion) {
              return null;
            }
            
            // Create inline completion item
            const item = new vscode.InlineCompletionItem(
              completion,
              new vscode.Range(position, position)
            );
            
            return [item];
          } catch (error) {
            console.error('Error generating inline suggestions:', error);
            return null;
          } finally {
            self.isProcessing = false;
            self.statusBarItem.text = "$(sparkle) AI Ready";
          }
        }
      }
    );
  }
  
  public setMode(mode: "agent" | "ask"): void {
    this.mode = mode;
  }
  
  public async askAtCursor(): Promise<void> {
    if (this.isProcessing) {
      vscode.window.showInformationMessage('Already processing a request, please wait...');
      return;
    }
    
    try {
      this.isProcessing = true;
      this.statusBarItem.text = "$(sync~spin) AI Thinking...";
      
      // Get the current document and selection
      const editor = vscode.window.activeTextEditor;
      if (!editor) {
        vscode.window.showErrorMessage('No active editor');
        return;
      }
      
      // Get the selected text or current line
      let selectedText = editor.document.getText(editor.selection);
      if (!selectedText) {
        // If no text is selected, get the current line
        const line = editor.document.lineAt(editor.selection.active.line);
        selectedText = line.text;
      }
      
      // Get surrounding context
      const surroundingContext = this.editorService.getSurroundingContext(100);
      
      // Combine selected text and context
      const prompt = `I'm working on this code:\n\n${surroundingContext}\n\nFocus on this specific part:\n\n${selectedText}\n\nPlease explain what this code does and suggest any improvements.`;
      
      // Show panel view
      await vscode.commands.executeCommand('vscode-openai-agent.showPanel');
      
      // Send to OpenAI
      await this.openAIService.chat(prompt);
    } catch (error: any) {
      console.error('Error asking about code:', error);
      vscode.window.showErrorMessage(`Error asking about code: ${error.message}`);
    } finally {
      this.isProcessing = false;
      this.statusBarItem.text = "$(sparkle) AI Ready";
    }
  }
  
  public async resetAssistantThread(): Promise<void> {
    try {
      const newThreadId = await this.openAIService.newThread();
      vscode.window.showInformationMessage('Started a new conversation with OpenAI Assistant');
      return;
    } catch (error: any) {
      console.error('Error resetting assistant thread:', error);
      vscode.window.showErrorMessage(`Error resetting assistant: ${error.message}`);
    }
  }
}
